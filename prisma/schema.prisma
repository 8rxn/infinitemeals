generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Ingredients {
  id       String @id @default(cuid())
  index    Int    @default(0)
  item     String
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@index([recipeId])
}

model Steps {
  id       String @id @default(cuid())
  index    Int    @default(0)
  step     String @db.VarChar(600)
  recipeId String
  recipe   Recipe @relation(fields: [recipeId], references: [id])

  @@index([recipeId])
}

model Tags {
  id         String   @id @default(cuid())
  name       String   @unique(map: "uniqueTagName")
  isCategory Boolean  @default(false)
  recipes    Recipe[]
}

model Recipe {
  id          String        @id @default(cuid())
  name        String
  imgUrl      String?
  imgSource   String?       @default("https://openai.com/dall-e-2") @db.VarChar(512)
  imgDomain   String?       @default("DALLE") @db.VarChar(255)
  tags        Tags[]
  ingredients Ingredients[]
  steps       Steps[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model c75aef_cd5b_52fa_910a_63bd5146601a_20230721110325_vrepl {
  id         String  @id
  name       String
  isCategory Boolean @default(false)

  @@map("_47c75aef_cd5b_52fa_910a_63bd5146601a_20230721110325_vrepl")
}

model RecipeToTags {
  A String
  B String

  @@unique([A, B], map: "_RecipeToTags_AB_unique")
  @@index([B], map: "_RecipeToTags_B_index")
  @@map("_RecipeToTags")
}

model fa7e2_365e_5a13_9584_b42d79276d04_20230722062746_vrepl {
  id     String  @id
  name   String
  imgUrl String?

  @@map("_603fa7e2_365e_5a13_9584_b42d79276d04_20230722062746_vrepl")
}
